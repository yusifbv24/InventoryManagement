@model DashboardViewModel
@{
    var currentPeriod = ViewContext.HttpContext.Request.Query["period"].ToString();
    if (string.IsNullOrEmpty(currentPeriod))
    {
        currentPeriod = "week";
    }
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Dashboard</h1>
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod=="week"? "active" : "")"
                    data-period="week" onclick="changePeriod('week')">This Week</button>
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod == "month" ? "active" : "")"
                    data-period="month" onclick="changePeriod('month')">This Week</button>
            <button type="button" class="btn btn-outline-secondary btn-sm @(currentPeriod == "all" ? "active" : "")"
                    data-period="all" onclick="changePeriod('all')">All time</button>
        </div>
    </div>

    <!-- Key Metrics -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Total Products</p>
                            <h3 class="mb-0">@Model.TotalProducts.ToString("N0")</h3>
                            <p class="text-success mb-0">
                                <i class="fas fa-arrow-up"></i> @Model.ActiveProducts active
                            </p>
                        </div>
                        <div class="rounded-circle bg-primary-soft text-primary p-3">
                            <i class="fas fa-boxes fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Total Routes</p>
                            <h3 class="mb-0">@Model.TotalRoutes.ToString("N0")</h3>
                            <p class="text-warning mb-0">
                                <i class="fas fa-clock"></i> @Model.PendingTransfers pending
                            </p>
                        </div>
                        <div class="rounded-circle bg-success-soft text-success p-3">
                            <i class="fas fa-route fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Active Departments</p>
                            <h3 class="mb-0">@Model.DepartmentStats.Count</h3>
                            <p class="text-info mb-0">
                                <i class="fas fa-users"></i> @Model.DepartmentStats.Sum(d => d.ActiveWorkers) workers
                            </p>
                        </div>
                        <div class="rounded-circle bg-info-soft text-info p-3">
                            <i class="fas fa-building fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-2">Categories</p>
                            <h3 class="mb-0">@Model.CategoryDistributions.Count</h3>
                            <p class="text-secondary mb-0">
                                <i class="fas fa-tags"></i> Active categories
                            </p>
                        </div>
                        <div class="rounded-circle bg-warning-soft text-warning p-3">
                            <i class="fas fa-tags fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-xl-8">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Department Overview</h5>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-primary active" data-chart="bar">Bar</button>
                            <button type="button" class="btn btn-outline-primary" data-chart="line">Line</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 300px;">
                        <canvas id="departmentChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Category Distribution</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 300px;">
                        <canvas id="categoryChart"></canvas>
                    </div>
                    <div id="categoryLegend" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity and Performance Row -->
    <div class="row">
        <div class="col-xl-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Transfer Activity</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 250px;">
                        <canvas id="transferChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Top Departments by Products</h5>
                        <a href="/Reports/Departments" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Department</th>
                                    <th>Products</th>
                                    <th>Workers</th>
                                    <th>Utilization</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var dept in Model.DepartmentStats.OrderByDescending(d => d.ProductCount).Take(5))
                                {
                                    <tr>
                                        <td>@dept.DepartmentName</td>
                                        <td><span class="badge bg-primary">@dept.ProductCount</span></td>
                                        <td>@dept.ActiveWorkers</td>
                                        <td>
                                            <div class="progress" style="height: 20px;">
                                                @{
                                                    // Utilization = (Products / (Workers * 10)) * 100
                                                    // Assuming each worker can handle 10 products optimally
                                                    var utilization = dept.ActiveWorkers > 0
                                                    ? Math.Min(100, (dept.ProductCount * 100.0 / (dept.ActiveWorkers * 10)))
                                                    : 0;
                                                }
                                                <div class="progress-bar" style="width: @utilization%">
                                                    @utilization.ToString("F0")%
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Store the current period globally
        let currentPeriod = '@currentPeriod';

        $(document).ready(function() {
            // Initialize with the current period
            initializeCharts();

            // Set the active button based on current period
            $(`[data-period="${currentPeriod}"]`).addClass('active');

            // Period switcher with proper state management
            $('[data-period]').click(function(e) {
                e.preventDefault();

                const $button = $(this);
                const period = $button.data('period');

                // Don't reload if already on this period
                if (period === currentPeriod) {
                    return;
                }

                // Update button states immediately for better UX
                $('[data-period]').removeClass('active');
                $button.addClass('active');

                // Show loading indicator
                showSpinner();

                // Navigate to the new period
                window.location.href = '/Home/Dashboard?period=' + period;
            });

            // Chart type switcher
            $('[data-chart]').click(function() {
                const chartType = $(this).data('chart');
                $(this).addClass('active').siblings().removeClass('active');

                if (departmentChart) {
                    departmentChart.config.type = chartType;
                    departmentChart.update();
                }
            });
        });
        function changePeriod(period) {
            // Don't reload if already on this period
            if (period === currentPeriod) {
                return;
            }

            // Show loading indicator
            showSpinner();

            // Navigate to the new period
            window.location.href = '/Home/Dashboard?period=' + period;
        }

        // Chart instances
        let departmentChart, categoryChart, transferChart;

        function initializeCharts() {
            initializeDepartmentChart();
            initializeCategoryChart();
            initializeTransferChart();
        }

        function initializeDepartmentChart() {
            const ctx = document.getElementById('departmentChart');
            if (!ctx) return;

            const colors = {
                primary: '#3B82F6',
                success: '#10B981'
            };

            departmentChart = new Chart(ctx.getContext('2d'), {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.DepartmentStats.Select(d => d.DepartmentName))),
                    datasets: [{
                        label: 'Products',
                        data: @Html.Raw(Json.Serialize(Model.DepartmentStats.Select(d => d.ProductCount))),
                        backgroundColor: colors.primary,
                        borderRadius: 8
                    }, {
                        label: 'Workers',
                        data: @Html.Raw(Json.Serialize(Model.DepartmentStats.Select(d => d.ActiveWorkers))),
                        backgroundColor: colors.success,
                        borderRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
        }

        function initializeCategoryChart() {
            const ctx = document.getElementById('categoryChart');
            if (!ctx) return;

            categoryChart = new Chart(ctx.getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.CategoryDistributions.Select(c => c.CategoryName))),
                    datasets: [{
                        data: @Html.Raw(Json.Serialize(Model.CategoryDistributions.Select(c => c.Count))),
                        backgroundColor: @Html.Raw(Json.Serialize(Model.CategoryDistributions.Select(c => c.Color))),
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    cutout: '70%'
                }
            });
        }

        function initializeTransferChart() {
            const ctx = document.getElementById('transferChart');
            if (!ctx) return;

            const colors = {
                success: '#10B981',
                warning: '#F59E0B'
            };

            // Generate dynamic data based on the period
            const transferData = generateTransferData(currentPeriod);

            transferChart = new Chart(ctx.getContext('2d'), {
                type: 'line',
                data: transferData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function generateTransferData(period) {
            let labels, completedData, pendingData;

            const colors = {
                success: '#10B981',
                warning: '#F59E0B'
            };

            switch(period) {
                case 'week':
                    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
                    completedData = [12, 19, 15, 25, 22, 18, 20];
                    pendingData = [5, 8, 6, 10, 7, 5, 8];
                    break;
                case 'month':
                    // Generate labels for last 30 days
                    labels = [];
                    for(let i = 29; i >= 0; i--) {
                        const date = new Date();
                        date.setDate(date.getDate() - i);
                        labels.push(date.getDate());
                    }
                    // Generate sample data for month
                    completedData = labels.map(() => Math.floor(Math.random() * 30) + 10);
                    pendingData = labels.map(() => Math.floor(Math.random() * 15) + 5);
                    break;
                default: // today
                    labels = ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00', '24:00'];
                    completedData = [2, 4, 8, 12, 10, 6, 3];
                    pendingData = [1, 2, 3, 5, 4, 2, 1];
            }

            return {
                labels: labels,
                datasets: [{
                    label: 'Completed',
                    data: completedData,
                    borderColor: colors.success,
                    backgroundColor: colors.success + '20',
                    tension: 0.4,
                    fill: true
                }, {
                    label: 'Pending',
                    data: pendingData,
                    borderColor: colors.warning,
                    backgroundColor: colors.warning + '20',
                    tension: 0.4,
                    fill: true
                }]
            };
        }

        function showSpinner() {
            if (!$('.spinner-overlay').length) {
                $('body').append(`
                    <div class="spinner-overlay">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                `);
            }
        }

        function hideSpinner() {
            $('.spinner-overlay').remove();
        }
    </script>
}